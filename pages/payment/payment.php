<?php
// Ensure WordPress is loaded
if (! defined('ABSPATH')) exit;

function payment_shortcode()
{
    global $wpdb;

    // Get current user
    $current_user = wp_get_current_user();
    $current_user_id = $current_user->ID;

    // Base query parameters
    $query_args = array(
        'role' => 'student',
        'meta_key' => 'payment_status',
        'meta_value' => 'ูู ุงูุชุธุงุฑ ุงูุฏูุน',
        'fields' => 'all'
    );

    // If not administrator, add m_id filter
    if (!current_user_can('administrator')) {
        if ($current_user_id == 27) {
            $query_args['meta_query'] = array(
                array(
                    'key' => 'm_id',
                    'value' => '^01',
                    'compare' => 'REGEXP'
                )
            );
        } elseif ($current_user_id == 65) {
            $query_args['meta_query'] = array(
                array(
                    'key' => 'm_id',
                    'value' => '^02',
                    'compare' => 'REGEXP'
                )
            );
        }
    }

    // Fetch students
    $students = get_users($query_args);

    // Prepare the data for the table
    $student_data = array();
    foreach ($students as $student) {
        $teacher_id = get_user_meta($student->ID, 'teacher', true);
        $student_data[] = array(
            'm_id' => get_user_meta($student->ID, 'm_id', true),
            'name' => $student->display_name,
            'teacher' => $teacher_id ? get_userdata($teacher_id)->display_name : '',
            'payment_phone' => get_user_meta($student->ID, 'payment_phone', true),
            'country' => get_user_meta($student->ID, 'country', true),
            'lessons_number' => get_user_meta($student->ID, 'lessons_number', true),
            'lesson_duration' => get_user_meta($student->ID, 'lesson_duration', true),
            'currency' => get_user_meta($student->ID, 'currency', true),
            'amount' => get_user_meta($student->ID, 'amount', true),
            'payment_status' => get_user_meta($student->ID, 'payment_status', true),
            'payment_status_change_date' => get_user_meta($student->ID, 'payment_status_change_date', true),
            'reminder_change_date' => get_user_meta($student->ID, 'reminder_change_date', true),

            'reminder' => get_user_meta($student->ID, 'reminder', true) ?: 'ูุง ููุฌุฏ',
            'notes' => get_user_meta($student->ID, 'notes', true),
            'payment_notes' => get_user_meta($student->ID, 'payment_notes', true)
        );
    }

    // Start output buffering
    ob_start();
?>
    <h2 style="text-align: center;">ุงููุฏููุนุงุช ูู ุงูุชุธุงุฑ ุงูุฏูุน ๐ธ</h2>

    <!-- Statistics Cards -->
    <div class="payment-stats-container" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;padding: 20px;">
        <div class="stat-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="total-students" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.9;">ุฅุฌูุงูู ุงูุทูุงุจ</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="no-reminder-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.9;">ูุง ููุฌุฏ ุชูุจูู</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="first-reminder-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.9;">ุงูุชูุจูู ุงูุฃูู</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="second-reminder-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.9;">ุงูุชูุจูู ุงูุซุงูู</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="third-reminder-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.9;">ุงูุชูุจูู ุงูุซุงูุซ</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); color: #333; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="no-response-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.8;">ูู ูุชู ุงูุฑุฏ</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); color: #333; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="total-amount" style="font-size: 1.5em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.8;">ุฅุฌูุงูู ุงููุจูุบ ุงููุณุชุญู</div>
        </div>

        <div class="stat-card" style="background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%); color: #333; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div class="stat-number" id="today-changes" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">0</div>
            <div class="stat-label" style="font-size: 0.9em; opacity: 0.8;">ุชุบููุฑุงุช ุงูููู</div>
        </div>
    </div>

    <div class="payment-filters" style="margin-bottom: 20px; display: flex; flex-wrap: wrap; gap: 20px; align-items: last baseline;">
        <div style="display: flex;flex-direction: column;">
            <label for="search-input">ุจุญุซ:</label>
            <input type="text" id="search-input" placeholder="ุจุญุซ ุจุงูุงุณู ุฃู ุงูุฑูู..." style="padding: 5px; width: 100%;">
        </div>
        <div>
            <label for="reminder-filter">ููุชุฑ ุงูุชูุจูู:</label>
            <select id="reminder-filter" style="padding: 5px;">
                <option value="">ุงููู</option>
                <option value="ูุง ููุฌุฏ">ูุง ููุฌุฏ</option>
                <option value="ุงูุชูุจูู ุงูุงูู">ุงูุชูุจูู ุงูุงูู</option>
                <option value="ุงูุชูุจูู ุงูุซุงูู">ุงูุชูุจูู ุงูุซุงูู</option>
                <option value="ุงูุชูุจูู ุงูุชุงูุช">ุงูุชูุจูู ุงูุชุงูุช</option>
                <option value="ูู ูุชู ุงูุฑุฏ">ูู ูุชู ุงูุฑุฏ</option>
            </select>
        </div>
        <div>
            <label for="history-filter">ููุชุฑ ุชุงุฑูุฎ ุงูุชูุจูู:</label>
            <select id="history-filter" style="padding: 5px;">
                <option value="">ุงููู</option>
                <option value="0">ุงูููู</option>
                <option value="1">ูุจู ููู ูุงุญุฏ</option>
                <option value="2">ูุจู ููููู</option>
                <option value="3">ูุจู 3 ุงูุงู</option>
                <option value="4">ูุจู 4 ุงูุงู</option>
                <option value="5">ูุจู 5 ุงูุงู</option>
                <option value="7">ูุจู ุฃุณุจูุน</option>
                <option value="14">ูุจู ุฃุณุจูุนูู</option>
                <option value="30">ูุจู ุดูุฑ</option>
            </select>
        </div>
    </div>

    <?php
    // Sort the student data by name
    usort($student_data, function ($a, $b) {
        return strcmp($a['name'], $b['name']);
    });
    ?>


    <table id="students-table">
        <thead>
            <tr>
                <th>ู</th>
                <th>ุงูุงุณู</th>
                <th>ุงููุนูู</th>
                <th>ุงููุงุชู</th>
                <th>ุงูุจูุฏ</th>
                <th>ุงูุญุตุต</th>
                <th>ุงููุฏุฉ</th>
                <th>ุงูุนููุฉ</th>
                <th>ุงููุจูุบ</th>
                <th>ุงูุชูุจูู</th>
                <th>ููุงุญุธุงุช</th>
                <th>ููุงุญุธุงุช ุงูุฏูุน</th>
                <th>ุฅูุตุงู ุงูุฏูุน</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($student_data as $student) : ?>
                <tr>
                    <td><?php echo esc_html($student['m_id']); ?></td>
                    <td class="student-name" style="cursor: pointer;"
                        data-status-date="<?php echo esc_attr($student['payment_status_change_date']); ?>"
                        data-reminder-date="<?php echo esc_attr($student['reminder_change_date']); ?>"
                        data-student-id="<?php echo esc_attr($student['m_id']); ?>">
                        <?php echo esc_html($student['name']); ?>
                    </td>
                    <td><?php echo esc_html($student['teacher']); ?></td>
                    <td class="payment-phone" data-student-id="<?php echo esc_attr($student['m_id']); ?>"><?php echo esc_html($student['payment_phone']); ?></td>
                    <td><?php echo esc_html($student['country']); ?></td>
                    <td><?php echo esc_html($student['lessons_number']); ?></td>
                    <td><?php echo esc_html($student['lesson_duration']); ?></td>
                    <td><?php echo esc_html($student['currency']); ?></td>
                    <td><?php echo esc_html($student['amount']); ?></td>
                    <td>
                        <select class="reminder-dropdown" style="padding: 5px; margin:0px;" data-student-id="<?php echo esc_attr($student['m_id']); ?>">
                            <option value="ูุง ููุฌุฏ" <?php echo ($student['reminder'] == 'ูุง ููุฌุฏ') ? 'selected' : ''; ?>>ูุง ููุฌุฏ</option>
                            <option value="ุงูุชูุจูู ุงูุงูู" <?php echo ($student['reminder'] == 'ุงูุชูุจูู ุงูุงูู') ? 'selected' : ''; ?>>ุงูุชูุจูู ุงูุงูู</option>
                            <option value="ุงูุชูุจูู ุงูุซุงูู" <?php echo ($student['reminder'] == 'ุงูุชูุจูู ุงูุซุงูู') ? 'selected' : ''; ?>>ุงูุชูุจูู ุงูุซุงูู</option>
                            <option value="ุงูุชูุจูู ุงูุชุงูุช" <?php echo ($student['reminder'] == 'ุงูุชูุจูู ุงูุชุงูุช') ? 'selected' : ''; ?>>ุงูุชูุจูู ุงูุชุงูุช</option>
                            <option value="ูู ูุชู ุงูุฑุฏ" <?php echo ($student['reminder'] == 'ูู ูุชู ุงูุฑุฏ') ? 'selected' : ''; ?>>ูู ูุชู ุงูุฑุฏ</option>
                        </select>
                    </td>

                    <td class="notes" data-student-id="<?php echo esc_attr($student['m_id']); ?>"><?php echo esc_html($student['notes']); ?></td>
                    <td class="payment_notes" data-student-id="<?php echo esc_attr($student['m_id']); ?>"><?php echo esc_html($student['payment_notes']); ?></td>
                    <td>
                        <button class="upload-receipt-btn"
                            data-student-id="<?php echo esc_attr($student['m_id']); ?>"
                            data-student-name="<?php echo esc_attr($student['name']); ?>"
                            data-currency="<?php echo esc_attr($student['currency']); ?>"
                            data-amount="<?php echo esc_attr($student['amount']); ?>"
                            title="๐ ุฑูุน ุฅูุตุงู ุงูุฏูุน"
                            style="background: none; border: none; cursor: pointer;">
                            <img src="<?php echo plugin_dir_url(__FILE__); ?>../../assets/css/upload.svg" alt="Upload" style="width: 24px; height: 24px;" />
                        </button>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>

    <!-- Receipt Upload Modal -->
    <div id="receipt-upload-modal" style="display:none;">
        <div class="receipt-modal-overlay"></div>
        <div class="receipt-modal-box receipt-modal-2col compact-modal">
            <form id="receipt-upload-form" enctype="multipart/form-data" dir="rtl">
                <h3 class="receipt-modal-title">ุฑูุน ุฅูุตุงู ุงูุฏูุน</h3>

                <div class="receipt-modal-flex">
                    <div class="receipt-modal-left">
                        <div class="receipt-modal-row">
                            <label>ุงุณู ุงูุทุงูุจ:</label>
                            <span id="modal-student-name"></span>
                        </div>
                        <div class="receipt-modal-row">
                            <label>ุงูุนููุฉ:</label>
                            <span id="modal-currency"></span>
                        </div>
                        <div class="receipt-modal-row">
                            <label for="modal-amount">ุงููุจูุบ:</label>
                            <input type="number" id="modal-amount" name="amount" required />
                        </div>
                        <div class="receipt-modal-row">
                            <label for="modal-payment-method">ุทุฑููุฉ ุงูุฏูุน:</label>
                            <select id="modal-payment-method" name="payment_method" required>
                                <option value="">ุงุฎุชุฑ ุทุฑููุฉ ุงูุฏูุน</option>
                                <option value="paypal">PayPal</option>
                                <option value="vodafone_cash">Vodafone Cash</option>
                                <option value="instapay">InstaPay</option>
                                <option value="bank">ุชุญููู ุจููู</option>
                            </select>
                        </div>
                        <div class="receipt-modal-row" id="modal-bank-row" style="display:none;">
                            <label for="modal-bank-name">ุงูุจูู:</label>
                            <select id="modal-bank-name" name="bank_name">
                                <option value="">ุงุฎุชุฑ ุงูุจูู</option>
                                <option value="ุจูู ุงูุณุนูุฏูุฉ">ุจูู ุงูุณุนูุฏูุฉ</option>
                                <option value="ุงูุจูู ุงูุงูุงุฑุงุช">ุงูุจูู ุงูุงูุงุฑุงุช</option>
                                <option value="ุจูู ูุณูุท">ุจูู ูุณูุท</option>
                                <option value="ุตุฑุงูุฉ">ุตุฑุงูุฉ</option>
                                <option value="ุงุฎุฑู">ุงุฎุฑู</option>
                            </select>
                        </div>

                    </div>
                    <div class="receipt-modal-right">
                        <div class="receipt-modal-row">
                            <div class="receipt-modal-row">
                                <label>ุงูุดูุฑ:</label>
                                <div style="position:relative;">
                                    <div id="custom-month-select" class="custom-month-select" tabindex="0">ุงุฎุชุฑ ุงูุดูุฑ</div>
                                    <div class="custom-month-dropdown" id="custom-month-dropdown" style="display:none;">
                                        <div class="custom-month-option" data-value="ููุงูุฑ">ููุงูุฑ</div>
                                        <div class="custom-month-option" data-value="ูุจุฑุงูุฑ">ูุจุฑุงูุฑ</div>
                                        <div class="custom-month-option" data-value="ูุงุฑุณ">ูุงุฑุณ</div>
                                        <div class="custom-month-option" data-value="ุงุจุฑูู">ุงุจุฑูู</div>
                                        <div class="custom-month-option" data-value="ูุงูู">ูุงูู</div>
                                        <div class="custom-month-option" data-value="ููููู">ููููู</div>
                                        <div class="custom-month-option" data-value="ููููู">ููููู</div>
                                        <div class="custom-month-option" data-value="ุงุบุณุทุณ">ุงุบุณุทุณ</div>
                                        <div class="custom-month-option" data-value="ุณุจุชูุจุฑ">ุณุจุชูุจุฑ</div>
                                        <div class="custom-month-option" data-value="ุงูุชูุจุฑ">ุงูุชูุจุฑ</div>
                                        <div class="custom-month-option" data-value="ููููุจุฑ">ููููุจุฑ</div>
                                        <div class="custom-month-option" data-value="ุฏูุณูุจุฑ">ุฏูุณูุจุฑ</div>
                                    </div>
                                    <input type="hidden" id="modal-months-hidden" name="months" value="[]" />
                                </div>
                            </div>
                            <label for="modal-file">ุฑูุน ุงูููู (ุตูุฑุฉ ุฃู PDF):</label>
                            <input type="file" id="modal-file" name="receipt_file" accept="image/*,application/pdf" required />
                            <div class="file-preview-area" id="file-preview-area"></div>
                        </div>
                        <div class="receipt-modal-row">
                            <label for="modal-notes">ููุงุญุธุงุช:</label>
                            <textarea id="modal-notes" name="notes" rows="2"></textarea>
                        </div>
                    </div>
                </div>
                <div class="receipt-modal-actions">
                    <button type="submit" class="receipt-modal-submit">ุฑูุน</button>
                    <button type="button" class="receipt-modal-cancel">ุฅูุบุงุก</button>
                </div>
                <input type="hidden" id="modal-student-id" name="student_id" />
                <input type="hidden" id="modal-student-name-hidden" name="student_name" />
                <input type="hidden" id="modal-currency-hidden" name="currency" />
            </form>
        </div>
    </div>
<?php
    return ob_get_clean();
}
add_shortcode('payment', 'payment_shortcode');

// Correctly register AJAX handlers
add_action('wp_ajax_update_payment_status', 'update_payment_status');
add_action('wp_ajax_nopriv_update_payment_status', 'update_payment_status');

function update_payment_status()
{
    if (!isset($_POST['student_id']) || !isset($_POST['payment_status'])) {
        wp_send_json_error('Missing parameters');
        return;
    }

    // Get the user ID based on m_id
    $m_id = sanitize_text_field($_POST['student_id']);
    $user = get_users(array(
        'meta_key' => 'm_id',
        'meta_value' => $m_id,
        'number' => 1,
    ));

    if (empty($user)) {
        wp_send_json_error('User not found');
        return;
    }

    $student_id = $user[0]->ID; // Get the actual user ID
    $payment_status = sanitize_text_field($_POST['payment_status']);

    // Update payment status and change date
    $updated = update_user_meta($student_id, 'payment_status', $payment_status);
    if ($updated) {
        // Update the payment status change date to current time
        update_user_meta($student_id, 'payment_status_change_date', current_time('Y-m-d H:i:s'));
        wp_send_json_success();
    } else {
        wp_send_json_error('Failed to update payment status');
    }
}

// Correctly register AJAX handlers for payment phone
add_action('wp_ajax_update_payment_phone', 'update_payment_phone');
add_action('wp_ajax_nopriv_update_payment_phone', 'update_payment_phone');

function update_payment_phone()
{
    if (!isset($_POST['student_id']) || !isset($_POST['payment_phone'])) {
        wp_send_json_error('Missing parameters');
        return;
    }

    // Get the user ID based on m_id
    $m_id = sanitize_text_field($_POST['student_id']);
    $user = get_users(array(
        'meta_key' => 'm_id',
        'meta_value' => $m_id,
        'number' => 1,
    ));

    if (empty($user)) {
        wp_send_json_error('User not found');
        return;
    }

    $student_id = $user[0]->ID; // Get the actual user ID
    $payment_phone = sanitize_text_field($_POST['payment_phone']);

    if (update_user_meta($student_id, 'payment_phone', $payment_phone)) {
        wp_send_json_success();
    } else {
        wp_send_json_error('Failed to update payment phone');
    }
}

// Add AJAX handler for updating payment notes
add_action('wp_ajax_update_notes', 'update_notes');
add_action('wp_ajax_nopriv_update_notes', 'update_notes');

function update_notes()
{
    if (!isset($_POST['student_id']) || !isset($_POST['notes'])) {
        wp_send_json_error('Missing parameters');
        return;
    }

    // Get the user ID based on m_id
    $m_id = sanitize_text_field($_POST['student_id']);
    $user = get_users(array(
        'meta_key' => 'm_id',
        'meta_value' => $m_id,
        'number' => 1,
    ));

    if (empty($user)) {
        wp_send_json_error('User not found');
        return;
    }

    $student_id = $user[0]->ID; // Get the actual user ID
    $notes = sanitize_text_field($_POST['notes']);

    if (update_user_meta($student_id, 'notes', $notes)) {
        wp_send_json_success();
    } else {
        wp_send_json_error('Failed to update payment notes');
    }
}



// Add AJAX handler for updating payment notes
add_action('wp_ajax_update_payment_notes', 'update_payment_notes');
add_action('wp_ajax_nopriv_update_payment_notes', 'update_payment_notes');

function update_payment_notes()
{
    if (!isset($_POST['student_id']) || !isset($_POST['payment_notes'])) {
        wp_send_json_error('Missing parameters');
        return;
    }

    // Get the user ID based on m_id
    $m_id = sanitize_text_field($_POST['student_id']);
    $user = get_users(array(
        'meta_key' => 'm_id',
        'meta_value' => $m_id,
        'number' => 1,
    ));

    if (empty($user)) {
        wp_send_json_error('User not found');
        return;
    }

    $student_id = $user[0]->ID; // Get the actual user ID
    $payment_notes = sanitize_text_field($_POST['payment_notes']);

    if (update_user_meta($student_id, 'payment_notes', $payment_notes)) {
        wp_send_json_success();
    } else {
        wp_send_json_error('Failed to update payment notes');
    }
}





// Add AJAX handler for updating reminder
add_action('wp_ajax_update_reminder', 'update_reminder');
add_action('wp_ajax_nopriv_update_reminder', 'update_reminder');

function update_reminder()
{
    if (!isset($_POST['student_id']) || !isset($_POST['reminder'])) {
        wp_send_json_error('Missing parameters');
        return;
    }

    // Get the user ID based on m_id
    $m_id = sanitize_text_field($_POST['student_id']);
    $user = get_users(array(
        'meta_key' => 'm_id',
        'meta_value' => $m_id,
        'number' => 1,
    ));

    if (empty($user)) {
        wp_send_json_error('User not found');
        return;
    }

    $student_id = $user[0]->ID;
    $reminder = sanitize_text_field($_POST['reminder']);

    if (update_user_meta($student_id, 'reminder', $reminder)) {
        wp_send_json_success();
    } else {
        wp_send_json_error('Failed to update reminder');
    }
}




add_action('wp_ajax_update_reminder_date', 'update_reminder_date');
add_action('wp_ajax_nopriv_update_reminder_date', 'update_reminder_date');

function update_reminder_date()
{
    $student_m_id = $_POST['student_id'];
    $reminder = $_POST['reminder'];

    // Get user_id from m_id
    global $wpdb;
    $user_id = $wpdb->get_var($wpdb->prepare(
        "SELECT user_id FROM {$wpdb->prefix}usermeta WHERE meta_key = 'm_id' AND meta_value = %s",
        $student_m_id
    ));

    if ($user_id) {
        // Get existing reminder history or initialize new array
        $reminder_history = get_user_meta($user_id, 'reminder_change_date', true);
        $reminder_history = $reminder_history ? json_decode($reminder_history, true) : [];

        // Set timezone to Cairo
        date_default_timezone_set('Africa/Cairo');

        // Format current time in Cairo timezone
        $current_time = date('Y-m-d H:i:s');
        $formatted_date = date('j/n/Y');
        $formatted_time = date('g:i a');

        // Add new reminder change to history
        $reminder_history[] = [
            'status' => $reminder,
            'date' => $formatted_date,
            'time' => $formatted_time,
            'timestamp' => $current_time // Keep original timestamp for sorting
        ];

        // Sort by timestamp in descending order (newest first)
        usort($reminder_history, function ($a, $b) {
            return strtotime($b['timestamp']) - strtotime($a['timestamp']);
        });

        // Store the updated history
        update_user_meta($user_id, 'reminder_change_date', json_encode($reminder_history));

        // Format the history for display
        $formatted_history = array_map(function ($entry) {
            return sprintf(
                '%s : %s ุงูุณุงุนุฉ %s',
                $entry['status'],
                $entry['date'],
                str_replace(['am', 'pm'], ['ุตุจุงุญุง', 'ูุณุงุกุง'], $entry['time'])
            );
        }, $reminder_history);

        wp_send_json_success([
            'date' => $formatted_history,
            'raw_history' => $reminder_history
        ]);
    } else {
        wp_send_json_error('Student not found');
    }
}


add_action('wp_ajax_clear_reminder_history', 'clear_reminder_history');
add_action('wp_ajax_nopriv_clear_reminder_history', 'clear_reminder_history');

function clear_reminder_history()
{
    if (!isset($_POST['student_id'])) {
        wp_send_json_error('Missing student ID');
        return;
    }

    $student_m_id = sanitize_text_field($_POST['student_id']);

    // Get user_id from m_id
    global $wpdb;
    $user_id = $wpdb->get_var($wpdb->prepare(
        "SELECT user_id FROM {$wpdb->prefix}usermeta WHERE meta_key = 'm_id' AND meta_value = %s",
        $student_m_id
    ));

    if ($user_id) {
        // Clear reminder history and current reminder
        delete_user_meta($user_id, 'reminder_change_date');
        update_user_meta($user_id, 'reminder', 'ูุง ููุฌุฏ');
        wp_send_json_success('Reminder history cleared');
    } else {
        wp_send_json_error('Student not found');
    }
}







// Add AJAX handler for sending WhatsApp message when reminder changes
add_action('wp_ajax_send_whatsapp_reminder', 'send_whatsapp_reminder');
add_action('wp_ajax_nopriv_send_whatsapp_reminder', 'send_whatsapp_reminder');

function send_whatsapp_reminder()
{
    if (!isset($_POST['student_id']) || !isset($_POST['reminder'])) {
        wp_send_json_error('Missing parameters');
        return;
    }

    // Get the user data based on m_id
    $m_id = sanitize_text_field($_POST['student_id']);
    $reminder = sanitize_text_field($_POST['reminder']);
    $previous_reminder = isset($_POST['previous_reminder']) ? sanitize_text_field($_POST['previous_reminder']) : '';

    // Get user based on m_id
    $user = get_users(array(
        'meta_key' => 'm_id',
        'meta_value' => $m_id,
        'number' => 1,
    ));

    if (empty($user)) {
        wp_send_json_error('User not found');
        return;
    }

    $student_id = $user[0]->ID;

    // Get payment phone number
    $payment_phone = get_user_meta($student_id, 'payment_phone', true);

    // Log the payment phone number for debugging
    error_log('Payment Phone: ' . $payment_phone);

    // Format phone number for WhatsApp (remove any spaces)
    $whatsapp_number = preg_replace('/\s+/', '', $payment_phone);

    // Ensure it has a country code (+ prefix)
    if (substr($whatsapp_number, 0, 1) !== '+') {
        $whatsapp_number = '+' . $whatsapp_number;
    }

    // For logging/display purposes only
    $chat_id = $whatsapp_number;

    // Only send message if there's a valid transition
    $valid_transition = false;
    $message = '';

    if ($previous_reminder === 'ูุง ููุฌุฏ' && $reminder === 'ุงูุชูุจูู ุงูุงูู') {
        $valid_transition = true;
        $message = 'ุฃูููุง ูุณูููุง ุจูู! ๐๐คฉ
ููุฏ ุฃู ูุนููู ุจุฃู ุงุดุชุฑุงูู ุงูุดูุฑู ูุฏ ุงูุชููุ ููุณุนุฏ ุจุงุณุชูุฑุงุฑู ูุนูุง ูู ุฑุญูุชู ุงูุชุนููููุฉ. โจ
ูุญู ูุคูู ุจุฃู ุงูุงุณุชูุฑุงุฑ ูู ุงูุชุนูู ูู ุงูุฃููุ ูุฐูู ูุฑุฌู ููู ุงูุงูุชุฒุงู ุจุญุถูุฑ ุญุตุตู ุจุดูู ููุชุธู ุญุชู ูุธู ููุนุฏู ูุญุฌูุฒูุง ูู ุฌุฏูู ุงููุนููุ ูููููู ุฅุชูุงู ุงูุฏูุน ูู ุฃู ููุช ููุงุณุจู.
๐ ุฅุฐุง ููุช ุจุญุงุฌุฉ ูุฃู ูุณุงุนุฏุฉ ุฃู ูุฏูู ุฃู ุงุณุชูุณุงุฑุงุชุ ูุง ุชุชุฑุฏุฏ ูู ุงูุชูุงุตู ูุนูุงุ ูุญู ููุง ุฏุงุฆููุง ูุฏุนูู. ๐
ุชูููู: (ูุชู ุฅุฑุณุงู ูุฐู ุงูุฑุณุงูุฉ ุชููุงุฆููุง ูู ุฎูุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู) ๐ฅ๐ค.';
    } elseif ($previous_reminder === 'ุงูุชูุจูู ุงูุงูู' && $reminder === 'ุงูุชูุจูู ุงูุซุงูู') {
        $valid_transition = true;
        $message = 'ุฃูููุง ูุณูููุง ุจูู! ๐๐คฉ
ููุฏ ุชุฐููุฑู ุจุฃู ุงุดุชุฑุงูู ูู ูุชู ุชุฌุฏูุฏู ุจุนุฏุ ููุญุจ ุฃู ุชุณุชูุฑ ูุนูุง ูู ุฑุญูุชูุง ุงูุชุนููููุฉ.
ุฅุฐุง ููุช ุจุญุงุฌุฉ ุฅูู ุจุนุถ ุงูููุช ูุฅุชูุงู ุงูุฏูุนุ ูุฑุฌู ุงูุฑุฏ ุนูู ูุฐู ุงูุฑุณุงูุฉ ูุฅุจูุงุบู ุจุงูููุช ุงูุฐู ููุงุณุจูุ ูุณุฃููู ุจุชุฐููุฑู ูู ุงูููุนุฏ ุงูุฐู ุชุญุฏุฏูุ ุญุชู ูุง ูุฒุนุฌู ุจุฑุณุงุฆู ุฅุถุงููุฉ.
๐ ุฅุฐุง ููุช ุจุญุงุฌุฉ ุฅูู ุฃู ูุณุงุนุฏุฉุ ูุง ุชุชุฑุฏุฏ ูู ุงูุชูุงุตู ูุนูุงุ ูุณุนุฏูุง ุฏุนูู ุฏุงุฆููุง. ๐
ุชูููู: (ูุชู ุฅุฑุณุงู ูุฐู ุงูุฑุณุงูุฉ ุชููุงุฆููุง ูู ุฎูุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู) ๐ฅ๐ค.';
    } elseif ($previous_reminder === 'ุงูุชูุจูู ุงูุซุงูู' && $reminder === 'ุงูุชูุจูู ุงูุชุงูุช') {
        $valid_transition = true;
        $message = 'ุฃูููุง ูุณูููุง ุจูู! ๐๐คฉ
ูุงุญุธูุง ุฃู ุงุดุชุฑุงูู ูู ูุชู ุชุฌุฏูุฏู ุจุนุฏุ ููุชููู ุฃู ุชุณุชูุฑ ูุนูุง ูู ุญุถูุฑ ุงูุญุตุต ูุงูุงุณุชูุงุฏุฉ ูู ุฏุฑูุณู.
ุฅุฐุง ููุช ุจุญุงุฌุฉ ุฅูู ูุฒูุฏ ูู ุงูููุชุ ููููู ุฅุจูุงุบู ุจุงูููุนุฏ ุงูุฐู ููุงุณุจู ูุฅุชูุงู ุงูุฏูุนุ ูุณุฃููู ุจุชุฐููุฑู ูู ุงูููุช ุงูุฐู ุชุญุฏุฏู.
๐ ุฅุฐุง ููุช ุจุญุงุฌุฉ ูุฃู ูุณุงุนุฏุฉ ุฃู ูุฏูู ุฃู ุงุณุชูุณุงุฑุงุชุ ูุญู ููุง ุฏุงุฆููุง ูุฏุนูู. ๐
ุชูููู: (ูุชู ุฅุฑุณุงู ูุฐู ุงูุฑุณุงูุฉ ุชููุงุฆููุง ูู ุฎูุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู) ๐ฅ๐ค.';
    } elseif ($previous_reminder === 'ุงูุชูุจูู ุงูุชุงูุช' && $reminder === 'ูู ูุชู ุงูุฑุฏ') {
        $valid_transition = true;
        $message = 'ุฃูููุง ูุณูููุง ุจูู! ๐๐คฉ
ููุฏ ุฅุจูุงุบู ุจุฃู ุงุดุชุฑุงูู ูู ูุชู ุชุฌุฏูุฏู ุญุชู ุงูุขูุ ููุฏ ูุคุซุฑ ุฐูู ุนูู ุฅููุงููุฉ ุญุถูุฑ ุงูุญุตุต ุงููุงุฏูุฉ.
ุฅุฐุง ููุช ุจุญุงุฌุฉ ุฅูู ุจุนุถ ุงูููุชุ ููููู ุฅุจูุงุบู ุจุงูููุช ุงูุฐู ููุงุณุจู ูุฅุชูุงู ุงูุฏูุนุ ูุณุฃููู ุจุชุฐููุฑู ุญูููุง.
๐ ูุถูุงู ุงุณุชูุฑุงุฑ ุญุถูุฑูุ ููุฑุฌู ุชุฌุฏูุฏ ุงูุงุดุชุฑุงู ูู ุฃูุฑุจ ููุช ูููู. ูุฅุฐุง ููุช ุชูุงุฌู ุฃู ุธุฑูู ุฎุงุตุฉุ ูุง ุชุชุฑุฏุฏ ูู ุงูุชูุงุตู ูุนูุงุ ููุญู ููุง ุฏุงุฆููุง ูุฏุนูู. ๐
ุชูููู: (ูุชู ุฅุฑุณุงู ูุฐู ุงูุฑุณุงูุฉ ุชููุงุฆููุง ูู ุฎูุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู) ๐ฅ๐ค.';
    }

    if (!$valid_transition || empty($message) || empty($chat_id)) {
        wp_send_json_error('Invalid transition or missing data');
        return;
    }

    // Use the unified WhatsApp sending function
    require_once dirname(dirname(dirname(__FILE__))) . '/includes/whatsapp.php';

    $args = array(
        'phone_number' => $whatsapp_number,
        'message' => $message,
        'm_id' => $m_id,
        'debug' => true,
        'force_resend' => true, // Force resend even if already sent today
        'add_to_log' => false   // Don't add to sent log to prevent duplicate checking
    );

    // Send WhatsApp message using the unified function
    $result = zuwad_send_whatsapp_message($args);

    // Log the attempt for debugging
    error_log('Payment reminder attempt details: ' . json_encode([
        'phone' => $whatsapp_number,
        'm_id' => $m_id,
        'reminder' => $reminder,
        'previous' => $previous_reminder,
        'result' => $result
    ]));

    if (!$result['success']) {
        error_log('WhatsApp API Error: ' . ($result['message'] ?? 'Unknown error'));
        wp_send_json_error(array('message' => 'WhatsApp sending failed: ' . $result['message']));
        return;
    }

    // Return success response with details
    wp_send_json_success([
        'message' => 'WhatsApp message sent successfully',
        'chat_id' => $chat_id,
        'reminder' => $reminder,
        'previous_reminder' => $previous_reminder
    ]);
}

// Add AJAX handler for fetching payment data
add_action('wp_ajax_fetch_payment_data', 'fetch_payment_data');
add_action('wp_ajax_nopriv_fetch_payment_data', 'fetch_payment_data');

function fetch_payment_data()
{
    global $wpdb;

    // Get current user
    $current_user = wp_get_current_user();
    $current_user_id = $current_user->ID;

    // Base query parameters
    $query_args = array(
        'role' => 'student',
        'meta_key' => 'payment_status',
        'meta_value' => 'ูู ุงูุชุธุงุฑ ุงูุฏูุน',
        'fields' => 'all'
    );

    // If not administrator, add m_id filter
    if (!current_user_can('administrator')) {
        if ($current_user_id == 27) {
            $query_args['meta_query'] = array(
                array(
                    'key' => 'm_id',
                    'value' => '^01',
                    'compare' => 'REGEXP'
                )
            );
        } elseif ($current_user_id == 65) {
            $query_args['meta_query'] = array(
                array(
                    'key' => 'm_id',
                    'value' => '^02',
                    'compare' => 'REGEXP'
                )
            );
        }
    }

    // Fetch students
    $students = get_users($query_args);

    // Prepare the data for the table
    $student_data = array();
    foreach ($students as $student) {
        $teacher_id = get_user_meta($student->ID, 'teacher', true);
        $student_data[] = array(
            'm_id' => get_user_meta($student->ID, 'm_id', true),
            'name' => $student->display_name,
            'teacher' => $teacher_id ? get_userdata($teacher_id)->display_name : '',
            'payment_phone' => get_user_meta($student->ID, 'payment_phone', true),
            'country' => get_user_meta($student->ID, 'country', true),
            'lessons_number' => get_user_meta($student->ID, 'lessons_number', true),
            'lesson_duration' => get_user_meta($student->ID, 'lesson_duration', true),
            'currency' => get_user_meta($student->ID, 'currency', true),
            'amount' => get_user_meta($student->ID, 'amount', true),
            'payment_status' => get_user_meta($student->ID, 'payment_status', true),
            'notes' => get_user_meta($student->ID, 'notes', true),
        );
    }

    wp_send_json_success($student_data);
}

// Payment receipt functionality has been moved to payment_receipts_shortcode.php

?>